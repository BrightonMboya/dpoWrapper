type functionParameters = {
    companyToken: string,
    amount: number,
    paymentCurrency: string,
    redirectUrl?: string,
    backUrl?: string,
    companyRefUnique?: string,
    ptl?: string,
    ptlType?: string,
    transactionChargeType?: number,
    transactionAutoChargeDate?: string,
    customerEmail?: string,
    customerFirstName?: string,
    customerLastName?: string,
    customerAddress?: string,
    customerCity?: string,
    customerCountry?: string,
    customerDialCode?: string,
    customerPhone?: string,
    customerZip?: string,
    demandPaymentbyTraveler?: boolean,
    userToken?: string,
    defaultPaymemt?: string,
    defaultPaymentCountry?: string,
    defaultPaymentMNO?: string,
    transactionToPrep?: string,
    allowRecurrent?: boolean,
    fraudTimeLimit?: number,
    voidable?: boolean,
    chargeType?: number,
    transMarketPlace?: string,
    transBlockCountries?: string,
    metaData?: string,
    smsTransaction?: boolean,
    transactionType?: string,
    deviceId?: string,
    deviceCountry?: string,
    transactionSource?: string,
    services: Array<{
        serviceDescription: string,
        serviceType: number,
        serviceTypeName: string,
        serviceDate: string,
        serviceFrom?: string,
        serviceTo?: string,
        serviceRef?: string,
    }>,
    allocations?: Array<{
        allocationCode: string,
        allocationAmount: number,
        allocationServiceType: number,
        allocationServiceDescription?: string,
        allocationInvoice?: string,
        allocationPnr?: string,
        allocationBlock?: string,
    }>
}

export default async function generateToken({ }: functionParameters) { }